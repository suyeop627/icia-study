  배열 
    변수의 묶음. 대표적인 순차구조의 데이터 저장방식.
    배열의 선언 : 키워드 - var, let, const 
      키워드 배열명 = [원소1, 원소2, 원소3, ... 원소n];
      키워드 배열명 = new Array(원소1, 원소2, 원소3, ...원소n)
      +)자바에서는 배열 원소의 개수를 지정해놓고 만들어야하며, 비어있는 배열을 만들 수도 없음 (js가 자유로움)

  빈 배열 선언
      키워드 배열명 = [];
      키워드 배열명 = new Array();      new - 새로운 뭔가를 처리해라. 만들어라. 

  배열 원소의 접근(공간 활용, 저장값 활용)
  특정 위치에 값 대입
  배열명[순번] = 값;
  저장값 활용(console.log라면..)
    console.log(배열명[순번]);

 
  원소의 추가 : push(새 값), unshift(새 값)
  원소의 삭제 : pop(), shift()
  
  배열 메소드 (대괄호 내용은 생략 가능) -   작성형식 : 배열.메소드()

  1) splice(idx, n[, add_item list]) : 배열의 원소를 지정한 개수만큼 삭제
      idx : 삭제할 원소의 위치(순번)
      n : 삭제할 원소의 개수
      add_item list : 삭제 후 추가할 원소의 목록(새 원소들)
      splice : 잇다. 이어붙이다.

  2) concat(합칠 배열) 
        : 두개의 배열을 합친다. 원본인 두 배열의 변화는 없으며, 두 배열이 합쳐진 새로운 배열이 만들어진다.
          (합쳐진 배열을 사용하려면 변수에 저장할 것.)
         기존의 배열을 합치고, 새로운 배열에 저장함. 변수에 저장 안하면 사라짐.
  
  3) indexOf("찾는원소", n) /lastIndexOf("찾는원소", n) 
        n: 검색 시작 위치 지정.(같은 값이 여러개일 경우, 어디부터 시작해서 찾을지 검색 가능)
        : 찾는 값이 있다면 0~n까지중에 idx값을 주고, 없으면 -1을 출력함
          찾고자 하는 원소의 위치(순번값을 알려준다.)
          lastIndexOf는 원소의 검색을 뒤에서부터 처리하지만, 순번은 앞에서부터의 순번을 알려준다.

  4) includes
        : 배열에 찾고자 하는 원소가 있으면 true, 없으면 false.
  5) sort 
        : 배열을 정렬하는 메소드(오름차순) (concat은 원본을 변경하지 않지만, sort는 원본을 변경시킨다. 원본을 유지할 필요가 있다면, 따로 하드카피해놔야 한다.)
          내림차순으로 정렬할 경우, 역순 정렬용 함수를 넣어서 처리
  6) reverse : 배열을 역순으로 재배치.(sort()와 reverse()를 같이 사용해서, 어떤 배열을 정리(오름차순)하고 역순(내림차순)으로 정리하기도 한다.)

  7) join([구분자]) : 배열을 문자열로 변환
    <->split([구분자]) : 문자열을 배열로 변환.
  
  8) slice(indx[, e_idx]) : 배열의 특정 부분을 추출하여 새 배열로 생성.
                       원래 배열은 이상없음.
                       idx : 추출할 시작 위치(순번)
                       e_idx : 추출할 마지막 위치(순번)(e_idx순번의 원소는 포함하지 않는다.)
                              이 값을 생략할 경우, 시작위치부터 끝까지 추출한다.


  shallow copy : 한 배열을 다른 배열로 복사할 때 모든 원소가 복사되는 것이 아니라, 배열에 새로운 링크가 되는 것.
    let nums=[1,2,3,4,5,];
    let nums2=nums;

    nums의 배열과 nums2의 배열은 같은 배열임!
    (한 배열이 두개의 이름을 갖게 되는 상황)

    




반복제어문    (for문은 배열과 같이 쓰이는 경우가 많다.)
1.for 
  특정 횟수 만큼 문장(들)을 반복적으로 실행할 때 사용하는 제어문
  기본형)
  for(카운터 변수 초기식; 반복횟수 조건식; 카운터 변수 증감식)
  {
    반복할 문장들;
  }


2중 중첩 for 문     (3세트 10번씩하는 느낌으로 )
for (초기식; 조건식; 증감식){
  for(초기식2; 조건식2;증감식2){

  }
}





  제어문의 중첩
    제어문 안에 또 다른 제어문이 들어가는 형식
    예)
    for(   ) {    
      for(    ){
        if(     ){
          switch(    ){

          }
        } //해당되는 태그를 가져와서 배열로 저장
      }
    }



  순차구조의 데이터를 처리할 때 유용함.
  for in : 배열의 순번을 활용하기 위한 반복문
  for of : 배열의 원소를 순차적으로 활용하기 위한 반복문
  forEach(v, idx, array) : 배열 순회 전용 메소드

예제
학생 인원수 입력 > 화면에 인원수만틈 input 태그 추가
>점수를 입력 > 계산(버튼) > 총점, 평균 출력


createElement(요소 생성), appendChild(요소 추가)
여러 요소를 한꺼번에 가져오기(querySelectorAll)








데이터 관리
1. 개별 변수
2. 배열(변수의 묶음)
3. 객체






