
제어문의 종류
조건 : if, switch
반복 : for, while(do)
기타 : break, continue



조건제어문
1. if(조건식) : (만일 ~ 라면)
    조건식이 참(true)라면 해당 문장을 실행하고
    거짓(false)라면 실행하지 않는다.
    형식
    1) if(조건식) { 실행문장 }
    2) if(조건식) { 실행문장 } else { 다른 실행문장 }
    3) if(조건식1) { 실행문장1 }
       else if(조건식2) { 실행문장2 }
      [
       else if(조건식3) { 실행문장3 }
       .......
       else { 다른 실행문장 }
      ] 

    형식 1의 예) 홀수 만 출력
    if((n % 2) == 1){ 
      console.log(n);
    }

    else 키워드 : 조건식이 거짓일 때의 실행 문장을
        작성하는 영역을 만드는 키워드.

2. switch(자료) : 자료가 어떤 case에 해당하면
    그 case로 이동해라~

    자료 : number 타입의 값 또는 변수(상수 포함),
          string 타입의 값 또는 변수(상수 포함)

          

    보조 키워드 : case, default
    관련 제어문 : break

  참고) 비교 연산은 주로 뺄셈으로 처리를

  컴퓨터는 모든 데이터를 수치화 하여 처리.
  뺄셈으로 처리되는 비교 연산은 시간이 오래걸린다.(보수화 하여 계산 처리)
  다중 분기의 경우 if보다 switch가 효율적.(분야에따라, 프로젝트의 규모에 따라서 고려해볼만하지만 SI분야에선 굳이..)
  si분야(웹프로그래밍 분야)에서는 고려할 사항은 아니다.

   break문 
    제어문을 중단시키는 역할을 하는 제어문.
    영향을 받는 제어문 : for, while, switch.
    if는 break의 영향을 받지 않는다.
    for와 while문에서 break을 사용할 경우, if와 같이 사용한다.

  switch에서의 break : case를 분리하는데 사용
    프로그램 코드가 순차적으로 처리됨.
    case를 분리시키지 않아야 하는 경우 break문을 쓰지 않는다.

  함수의 return
    함수를 종료시키는 역할을 하는 키워드.


로그인 화면 만들기
아이디와 비밀번호를 입력받아서 스크립트 코드에 임의의 맞는 아이디와 비밀번호 생성
그 값과 입력값이 같은지 비교

맞으면 메인페이지로 이동

틀리면 경고창 띄우기
1. 아이디가 틀립니다.
2.비밀번호가 틀립니다.



반복제어문 
1.for 
  특정 횟수 만큼 문장(들)을 반복적으로 실행할 때 사용하는 제어문
  기본형)
  for(카운터 변수 초기식; 반복횟수 조건식; 카운터 변수 증감식)
  {
    반복할 문장들;
  }


2중 중첩 for 문     (3세트 10번씩하는 느낌으로 )
for (초기식; 조건식; 증감식){
  for(초기식2; 조건식2;증감식2){

  }
}





  제어문의 중첩
    제어문 안에 또 다른 제어문이 들어가는 형식
    예)
    for(   ) {    
      for(    ){
        if(     ){
          switch(    ){

          }
        }
      }
    }



  순차구조의 데이터를 처리할 때 유용함.
  for in
  for of

  관련 라이브러리 함수 : forEach()

  배열 
    변수의 묶음. 대표적인 순차구조의 데이터 저장방식.
    배열의 선언 : 키워드 - var, let, const 
      키워드 배열명 = [원소1, 원소2, 원소3, ... 원소n];
      키워드 배열명 = new Array(원소1, 원소2, 원소3, ...원소n)
      +)자바에서는 배열 원소의 개수를 지정해놓고 만들어야하며, 비어있는 배열을 만들 수도 없음 (js가 자유로움)

  빈 배열 선언
      키워드 배열명 = [];
      키워드 배열명 = new Array();      new - 새로운 뭔가를 처리해라. 만들어라. 

  배열 원소의 접근(공간 활용, 저장값 활용)
  특정 위치에 값 대입
  배열명[순번] = 값;
  저장값 활용(console.log라면..)
    console.log(배열명[순번]);
  
