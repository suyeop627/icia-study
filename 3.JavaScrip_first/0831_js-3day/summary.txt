
변수(var, let), 상수(const)

데이터 타입(number, string, boolean, undefined, null)

연산자(=, +, -, *, /, %, +=, -=, *=, /=, 비교, ++, --)
  컴퓨터는 +연산만 할 수 있다.
  * : 반복해서더하기
  - : 


연산자
1. 산술연산자 : +, -, *, /, %
  (대입 =, 복합대입 +=, -=, *=. /=, %=)

2. 증감연산자 : ++, --
  전위 : 증가(또는 감소) 후 변수의 값 사용
  후위 : 변수의 값 사용 후 증가(또는 감소)

3. 비교연산자 : ==, !=, >, >=, <, <=, ===, !==
  조건식을 만드는 데 사용하는 연산자 
  연산의 결과는 true/false가 된다.
  === : 좌우가 같으면 참(true)
  !== : 좌우가 다르면 참(true)

4. 논리연산자 : &&, ||, (!)

&& - 논리곱(AND) : 두 조건식이 모두 true면 전체 조건식이 true.(나머지는 모두 false)
|| - 논리합(or) : 두 조건식이 모두 false면 전체 조건식이 false.(나머지는 모두 true)

5. 조건연산자 : (조건식) ? A : B
  조건식이 true일 경우, A를, false일 경우, b를 실행

  (조건식1) ? A : ((조건식 2)? b: C)      <- else if와 같은 형태

상황에 따라 처리를 다르게 하는 연산자 : +
  1) 숫자+숫자 -> 산술(더하기)
  2) 문자열 +(문자열, 숫자, boolean) ->문자열 결합







제어문(if, switch, for, while)
if, switch - 분기문
for(횟수가 정해진 상황), while(횟수가 정해지지 않은 상황) - 반복문

배열 : 변수의 묶음

함수 : 한가지 목적을 처리하기 위한 문장(명령어)의 묶음

객체(HTML의 요소 처리)





조건 제어문 
1. if(조건식) : (만일 ~ 라면)
        조건식이 참(true)라면 해당 문장을 실행하고, 거짓(false)라면 실행하지 않는다.
        
        형식
        
        1)if(조건식) {실행문장}
       
        2)if(조건식) {실행문장} else {다른 실행문장}
       
        3)if(조건식1) {실행문장1}
        else if(조건식2) {실행문장2}
        [
          else if(조건식3) {실행문장3}
          .....
          else { 실행문장 }

        ]
       
       
       
       
      형식 1 예) 홀수만 출력
        if((n % 2)==1){
          console.log(n);
        }



        else 키워드 : 조건식이 거짓일 때의 실행 문장을 작성하는 영역을 만드는 키워드.



  2. switch(자료) : 자료가 어떤 case에 해당하면그 case로 이동해라
    
    자료 : number 타입의 값 또는 변수(상수 포함), 
          string 타입의 값 또는 변수(상수 포함)
    
    
    보조 키워드 : case, default
                          (모든 케이스에 해당하지 않을때. switch문에서 default가 없을 수도 있음)
    
    관련 제어문 : break
    


제어문의 종류 
조건 : if, 
switch(결과가 나와있고, 다양한 분기를 처리해야할 상황에서 유용)




반복 :
 for, while(do)


기타 :
 break 다른 제어문들과 함께 사용할 수 있는 제어문으로, 흐름을 멈추고 조건문을 끝냄
  continue

