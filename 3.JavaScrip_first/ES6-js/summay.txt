ESC 6 (ECMAScrip 6) 문법 ES5(구버전)

1. let, const 키워드 

var 한가지만 사용하던 변수 선언에 추가된 키워드
호이스팅(hoisting) - 선언을 나중에 하더라도 사용 가능

2. 템플릿 리터럴 (literal - 실질적으로 대입되는 값, 'let a = 10'의 '10'이 리터럴이다. )
` (back tick)을 사용하여 변수의 값을 리터럴처럼 사용하는 것. 변수의 값은 ${변수} 의 형식으로 출력한다.

//ES5
var str1 = ', ';
var str2 = 'World!';
var str 3 = 'Hello' + str1 + str2;  //Hello, World!

//ES6
let str1 = ', ';
let str2 = 'World!';
let str = `Hello${str1}$}str2}`;


3. 구조 분해 할당(Spread)
객체나 배열에서 사용하는 기법으로, 객체나 배열을 해체한 후 개별 값을 새로 할당하는 과정(방식)



4. Spread Operation(...) 배열이나 객체를 새로운 배열이나 객체로 복제. 새로운 값 추가
let arr1 = [1,2,3,4];
let arr2 = arr1; //새로운 배열이 아니라 같은 배열(shallow copy - 하나의 배열의 이름이 두개가 된 상황)


5. Default Parameter(기본 매개 변수)
함수의 인자를 넘겨줄 때, 기본값 설정이 가능함.
함수를 실행할 때 매개변수에 값을 넣지 않으면, 설정한 기본 값을 사용.

※ 함수 표현식 : 변수에 함수를 넣는 방식
const func = function(p){ .... };

func(pp); //사용 방식은 일반적인 함수와 동일

hoisting 방지를 목적으로 사용, 


6. 화살표 함수 (=>)
함수 표현식을 화살표 함수로 표현할 수 있다.
함수를 간결하게 작성할 수 있는 방식으로, 가독성 및 유지 보수성을 옾이는 방식이다.


1) (매개변수) => { ... }
    const func = (p) => {...};
2) 매개변수가 하나일 경우, 괄호를 생략할 수 있다.
    const func = p=>{ ... };
3)매개 변수가 없거나 둘 이상일 경우, 괄호를 반드시 써야한다.
    const func = ()=>{...};
    const func =(a,b)=>{...};
4) 정의부에 return [값 || 식] 뿐인 함수는 return을 생략할 수 있다.
    const func = function(p){
      return p+1;
    }
    => 
    const func = p=>{p+1};
    cosnt func = p => p+1;

5) return에 객체를 보내는 경우 (,)(괄호)를 생략할 수 없다.
    const func = () => ({
      a : 1, 
      B : 2
     });
6) this를 통한 동적 바인딩 불가.

다음과 같은 경우, 화살표 함수는 사용할 수 없다. 
(엄밀히 말하면, 화살표 함수 내부에서 this를 사용할 수는 있지만, this의 대상이 window가 된다.)
$("#id").click(function(){
  $(this).text("off");
})




7. Array Helper : 배열과 관련된 작업을 보다 깔끔하게 처리할 수 있도록 지원하는 함수들. 화살표 함수와 함께 사용

1) forEach - 배열의 처음 요소부터 순서대로 사용하도록 지원 forEach가 배열에서 하나씩 꺼내고, 꺼낸 것에 대한 처리는 콜백함수에서 한다.

array.forEach(function (value, index, arr){...})

arr: 원본 배열(변경할 필요가 있을 경우 사용.)



2) map - 배열 내의 모든 요소 각각에 대하여 연산을 수행하고, 그 결과로 새로운 배열을 생성(원본 배열 유지)
array.map(function(value, index, arr){...})
