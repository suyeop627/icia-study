함수
  특수한 한가지 목적을 가진 명령어를 묶어 놓은 것
  결과는 하나다.

유형 
1. 파라미터, 반환값
2. 파라미터
3. 반환값
4. 파라미터, 반환값 모두 없는 유형

HTML요소를 제어하는 것이 목적.
요소에 발생하는 이벤트(클릭, 키보드조작, 등)를 처리하는 경우가 많아, 
2또는 4 유형을 많이 사용.

return 
1. 함수의 종료
2. 함수 내부에서 처리된 결과값을 넘기는데 사용



Document Object Model(DOM)
  HTML 문서의 요소를 객체화하여 사용하는 방식.
  getElementById, querySelector 등 사용해서 HTML 요소를 가져오면 
  javascript에서 객체가 되어 사용할 수 있다.
  객체 div를 수정하면, 브라우저가 요소<div>를 수정해줌

서버는 문서파일을 보내는게 아니라 문자열로만 이루어진 데이터를 전송함.
브라우저가 문자열을 저장해서 파일로 만듦
파일 자체를 수정하긴 어려워서, 가상의 오브젝트를 만들어놓음.
이런 오브젝트를 js로 사용할 수 있게 처리하면 그 변경내용이 파일에 적용되는 식


this 키워드 
요소자신. 이벤트가 발생한 요소.
이벤트 처리 속성에서 this를 매개변수로 사용하면 함수에서 요소를 가져와서 처리할 수 있다.
  함수의 인자로 this 키워드를 사용하면, 그 함수를 호출할 때, 매개인자를 넣을 경우,
  그 인자에 이벤트가 발생한 요소를 담아올 수 있다.

classList 
  HTML 요소의 class 속성에 저장된 값을 제어하는 키워드.
  주요함수 
    1) add(string) : 새로운 'string' 값을 class 속성에 추가
    2) remove(string) : string' 값을 class 속성에서 제거
    3) toggle(string) : add와 remove가 합쳐진 상태
    4) contains(string) : 'string'이 class 속성에 있는지 여부 확인, 들어가 있으면 true, 없으면 false
    5) replace(str1, str2) : class 속성에 str1이 있으면, str2로 변경 

함수 인자의 처리
  같은 이름의 함수를 여러개 만들 수 있지만, 문서 위치 상 아랫쪽 함수만 실행됨.
  인자(파라미터)의 개수가 다른 여러 함수를 사용할 수 없음.
  한 함수로 다양한 파라미터 개수를 대응하기 위한 방법을 제공->arguments 배열 활용
  (인자 : arguments)

야구 전광판 예제
1. 버튼에 클릭 이벤트 부여
2. 3스트라이크일 때, 아웃 1 증가 (alert)
    스트라이크와 볼 초기화
3. 4볼일 때(alert), 스트라이크와 볼 초기화
4. 3아웃일 때 재시작 버튼 보이기
    스트라이크 버튼과 볼 버튼 비활성화
5. 재시작 버튼 클릭 시 스트라이크, 볼, 아웃카운트 초기화
  재시작 버튼숨기기(스트라이크, 볼 버튼 활성화)

  비활성화 방법 : btn.disabled = true
  활성화 방법 : btn.disabled = false
  숨기는 방법 : btn.style.display = "none"
  버튼 보이게 하는 방법 : btn.style.display="inline";


객체(Object)
컴퓨터 과학에서 객체 또는 오브젝트(object)는 
클래스에서 정의한 것을 토대로 메모리(실제 저장공간)에 
할당된 것으로 프로그램에서 사용되는 데이터 또는 
식별자에 의해 참조되는 공간을 의미하며, 변수, 자료 구조, 
함수 또는 메소드가 될 수 있다. - 위키백과

프로그램을 단순히 데이터와 처리 방법으로 나누는 것이 
아니라, 프로그램을 수많은 '객체(object)'라는 
기본 단위로 나누고 이들의 상호작용으로 서술하는 방식이다. 
객체란 하나의 역할을 수행하는 '메소드(함수)와 변수(데이터)'의 
묶음으로 봐야 한다. - 나무위키

함수는 하나의 목적으로 생성하지만, 객체는 하나 이상의 목표를 가질 수 있다.

자판기(객체) - 버튼 객체 + 동전주입구 + 음료 나오는 부분


객체 묶음을 또 다른 객체로 정의할 수도 있다.




사람 - 인적정보 + 행동
존재하는 모든 것 - 객체

메소드(method) : 객체(Object) 내부에 정의된 함수





1) HTML 요소를 자바스크립트에서 사용
2) 정보를 처리하는 단위로 사용


객체 지향 프로그래밍(Object Orieted Programming)
  문제 해결을 위한 코드(명령어)를 객체 단위로 작성하는 프로그래밍 기법

구조적(절차적)프로그래밍 : C 언어





반도체
  도체(전기가 흐름) + 부도체(전기가 안흐름)
  도체중에 전기가 좋긴 하지만 비쌈
  대체제로 구리 -> 불순물이 섞여있어서 발열 화재 등 문제 생길 수 있음
  불순물이 껴있는 상태 - 노이즈가 껴있다.
  전기가 흐를때는 1, 전기가 흐르지 않을때는 0

  대표적인 반도체 -> 트렌지스터 : 전기 신호가 들어가면, 흐름이 가기도 하고 안가기도 하게 하는거.
트렌지스터 이후로 하드웨어의 발전이 두드러짐
하드웨어가 발전하는데 비해서 소프트웨어의 발전이 더뎌짐
소프트웨어의 효율적 개발을 연구하는 학문이 S.E (software engineering)
전체적인 프로그램의 명령을 체계화, 방향성을 가지고 절차적으로 개발하자는 목표하에 나온 언어가 구조적(절차적)프로그래밍 언어.




문서 객체 모델(Document Object Model, DOM)
  문서 상의 모든 요소는 화면에 출력되기 전에 객체화하여 저장된다.(by 브라우저)

DOM을 사용한 요소의 속성값 변경
  1) 객체변수.속성 = '속성값';
      이미지의 너비/높이 변경 - attribute 변경
      const img = document.getElementById("image");
      img.width=400;
      img.height = 300;
  
  +)css의 속성 - property
    html의 속성 - attribute

  2) 객체변수.setAttribute("속성명", "바꿀 속성값")
      img.setAttribute("src", yyy.jpg);<-이미지 변경
      img.setAttribute("style", "border: 1px solid;")
        -><img src="..." style="border: 1px solid;">
      
      =>img.style.border  = "1px solid";



HTML요소 선택자
1) getElementById : 요소의 id 속성값으로 선택
2) getElementsByTagName : 요소의 태그명으로 선택
                          (같은 태그의 요소를 한번에 같이 선택한다. - 항상 배열로 저장됨.)
3) getElementsByClassName : 요소의 class속성값으로 선택
같은 클래스의 요소를 한꺼번에 같이 선택.
무조건 요소의 배열로 처리

TagName이나 ClassName으로 한 요소를 선택하여 제어할 경우 반드시 객체변수[0].ooo의 형태로 사용한다.
4)querySelector : 요소 선택 키워드를 CSS 방식으로 처리
                  태그명은 그대로 작성, id일 경우 '#', class일 경우 '.'을 앞에 붙인다.
                  다수의 요소가 같은 class인 경우, 무조건 첫번째 요소만 선택한다.
5)querySelectorAll : 요소 선택 키워드를 CSS 방식으로 처리
                    같은 태그, 클래스 속성인 요소를 배열로 묶어서 선택.









렌더링: 메모리상의 객체 모델을 화면에 투영하는 작업



