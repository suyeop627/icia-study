


반복제어문    (for문은 배열과 같이 쓰이는 경우가 많다.)
1.for 
  특정 횟수 만큼 문장(들)을 반복적으로 실행할 때 사용하는 제어문
  기본형)
  for(카운터 변수 초기식; 반복횟수 조건식; 카운터 변수 증감식)
  {
    반복할 문장들;
  }


2중 중첩 for 문     (3세트 10번씩하는 느낌으로 )
for (초기식; 조건식; 증감식){
  for(초기식2; 조건식2;증감식2){

  }
}



  제어문의 중첩
    제어문 안에 또 다른 제어문이 들어가는 형식
    예)
    for(   ) {    
      for(    ){
        if(     ){
          switch(    ){

          }
        } //해당되는 태그를 가져와서 배열로 저장
      }
    }



  순차구조의 데이터를 처리할 때 유용함.
  for in : 배열의 순번을 활용하기 위한 반복문
  for of : 배열의 원소를 순차적으로 활용하기 위한 반복문
  forEach(v, idx, array) : 배열 순회 전용 메소드

예제
학생 인원수 입력 > 화면에 인원수만틈 input 태그 추가
>점수를 입력 > 계산(버튼) > 총점, 평균 출력


createElement(요소 생성), appendChild(요소 추가)
여러 요소를 한꺼번에 가져오기(querySelectorAll)




2. while(조건식)
  조건식이 true면 반복을 진행, false면 반복 종료
  횟수로 반복하는 것이 아닌, 특정 조건에 만족하는 경우 명령문장을 반복.

  기본문법)
    while(조건식){
      반복문장들;...
    }

  do, while 문법)
    do { 
      반복 문장들; ... 
    } while(조건식);
    반복문장들을 실행하고 조건을 따지는 방식.
    최소 1번은 반복문장들이 실행된다.
    
  일단 입력을 받고나서(do) 반복해서 처리해야 할 때 do, while문 쓰는 게 나을 수도 있음.



연구문제 ) 가위바위보 게임
가위, 바위, 보를 버튼 3개로 작성.




기타 제어문
1. break : 제어문을 중단시키는 역할을 하는 제어문
          for, while, switch (if문은 break에 영향을 받지 않음.)
          반복문을 중단시킬 때는 if문과 함께 사용
2. continue : 제어문을 지속시키지만 continue 다음의 문장은 실행하지 않는다. (for, while) continue아래 문장은 뛰어넘고 다시 처음으로 돌아가서 반복함

제어문 
1. 조건 : if, switch
2. 반복 : for, while
3. 기타 : break, continue




함수와 객체
  함수란
    특수한 한가지 목적을 가진 명령어를 묶어 놓은 것.
    묶었을 때의 장점 
      - 묶인 명령어를 반복적으로 사용 가능(재사용성)
      단점
      - 묶기가 어렵다.(설계가 필요)

  함수의 유형 4가지
  1. 입력값(인자, 파라미터)과 출력값(return, 반환)이 있는 유형
    내가 로봇에게 재료를 주면(파라미터), 로봇이 재료로 만들어서 나에게 주는 결과(반환값)가 있는 형태
  2. 입력값만 있는 유형
    내가 재료를 주면, 로봇이 만들어서 진열도 하는 형태
  3. 출력값만 있는 유형
    내가 명령만 하면 로봇이 재료를 구해서 만들어서 나에게 주는형태
  4. 입력값과 출력값이 모두 없는 유형
    내가 명령만 하면 로봇이 재료를 구해서 만들고 진열도 하는 형태

  함수 선언
    함수도 사용하려면 선언을 해야한다.
      함수 사용 단계
      함수선언->함수호출

  함수 선언 문법)
  function 함수명 ([매개변수1, 매개변수2, ...]) {
    실행 문장들;   
    ......
    [return 반환값;]     
  }

  함수 호출 
  1. 반환이 있는 경우(인자가 있을 경우) - 반환값을 변수에 넣는 형태
  -변수 = 함수명(인자값1, 인자값2, ...);
  2.인자만 있는 경우
  -함수명(인자값)
  3.반환만 있는 경우
  -변수 = 함수명();
  4.인자와 반환이 모두 없을 경우
  -함수명();

  함수 호이스팅(hoisting)(hoist : 밧줄등으로 끌어올리다 들어올리다)
    선언위치와 상관없이 어디서든 사용(호출) 가능한 것.

  함수 표현식
    변수에 익명함수를 저장하는 형식(호이스팅 불가)
    const fname = function(){ statement; };


return 문장
  함수를 종료시키는 역할을 담당하는 문장.
  함수 내부에서 처리한 결과값을 넘겨주는 역할


코드를 읽어가다가 함수 실행문장을 보면, 
함수를 불러오는데(call function), 
함수 내부의 흐름대로 읽다가 다시 원래 흐름으로 
돌아오는 것을 return이라고 함.




NaN(Not a Number) : 숫자가 아니다. (산술연산을 할 수 없다.)



버그(bug, 벌레) - 디버그(Debug)
  문장별로 실행하여 변수 값의 변동이나 로직의 흐름이 정상적으로 진행되는지 여부를 확인하면서 코드를 수정하는 과정(Debugging, 디버깅)

  break point(중단점) : 코드를 정상적으로 실행하다가 중단점에서 일시 정지를 한다.

두번째버튼 -> 함수는 뛰어 넘기
세번째버튼 -> 함수 내부확인 
