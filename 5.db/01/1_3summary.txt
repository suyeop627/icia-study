1장 db

데이터와 정보
데이터(자료, data)
현실 세계에서 단순히 관찰하거나 측정하여 수집한 사실이나 값

정보(information)
의사 결정에 유용하게 활용할 수 있도록 데이터를 처리한 결과물

프로그래밍에 필요한 정보의 밑천이 데이터


정보 처리(information processing)
데이터에서 정보를 추출하는 과정 또는 방법

주문일자, 데이터, 제품명, 판매금액 등의 데이터를 각 제품별 판매액을 도출하거나,
분기별 총판액을 시각적 자료(그래프, 표 등)으로 추출하는 과정이나 방법

정보 시스템과 데이터베이스
정보 시스템(information system)
조직 운영에 필요한 데이터를 수집하여 저장해두었다가 필요할 때 유용한 정보를 만들어 주는 수단
데이터베이스
정보 시스템 안에서 데이터를 저장하고 있다가 필요할 때 제공하는 역할을 담당


데이터베이스(DB; DataBase)
특정 조직의 여러 사용자가 공유하여 사용할 수 있도록 통합해서 저장한 운영 데이터의 집합


공유 데이터
    특정 조직의 여러 사용자가 함께 소유하고 이용할 수 있는 공용 데이터
통합 데이터
    최소의 중복과 통제 가능한 중복만 허용하는 데이터
저장 데이터
    컴퓨터가 접근할 수 있는 매체에 저장된 데이터
    데이터의 제공목적의 컴퓨터 - 서버
    데이터의 사용목적의 컴퓨터 - 클라이언트
운영 데이터
    조직의 주요 기능을 수행하기 위해 지속적으로 꼭 필요한 데이터(항상 사용할 수 있는, 실행목적의 데이터)

특징>
실시간 접근
    사용자의 데이터 요구에 실시간으로 응답
계속 변화
    데이터의 계속적인 삽입, 삭제, 수정을 통해 현재의 정확한 데이터를 유지
동시 공유
    서로 다른 데이터의 동시 사용뿐만 아니라 같은 데이터의 동시 사용도 지원
내용 기반 참조
    데이터가 저장된 주소나 위치가 아닌 내용으로 참조
    (자바에서 배웠던 참조주소는 값이 저장된 메모리의 주소로 값을 찾지만,
    db는 내용(값)그 자체로 참조한다. - 인터넷 검색이나 문서에서 키워드 찾기 같은 것이 내용 기반 참조.)
    예) 재고량이 1,000개 이상인 제품의 이름을 검색하시오.


데이터의 분류
정형 데이터(structured data)
    구조화된 데이터, 즉 미리 정해진 구조에 따라 저장된 데이터
    예 : 엑셀의 스프레드시트, 관계 데이터베이스의 테이블

반정형 데이터(semi-structured data)
    구조에 따라 저장된 데이터이지만 데이터 내용 안에 구조에 대한 설명이 함께 존재
    구조를 파악하는 파싱(parsing) 과정이 필요
    보통 파일 형태로 저장
    예 : 웹에서 데이터를 교환하기 위해 작성하는 HTML, XML(태그형식으로 데이터를 저장함),
         JSON 문서나 웹 로그, 센서 데이터 등

비정형 데이터(unstructured data)
    정해진 구조가 없이 저장된 데이터 - 데이터의 양 자체가 많아질수밖에 없으며(빅데이터), 이를 활용하기 위한 시도나 결과물도도 많다.
    예 : 소셜 데이터의 텍스트, 영상, 이미지, 워드나 PDF 문서와 같은 멀티미디어 데이터
    +)미디어 - 매체


2장 dbms

파일 시스템(file system)
데이터를 파일로 관리하기 위해 파일을 생성·삭제·수정·검색하는 기능을 제공하는 소프트웨어
응용 프로그램마다 필요한 데이터를 별도의 파일로 관리함


파일 시스템의 문제점
-같은 내용의 데이터가 여러 파일에 중복 저장된다
예를들어, 고객 관리 프로그램의 고객 데이터파일과 주문관리 프로그램의 주문데이터 파일에
같은 내용의 데이터가 여러 파일에 중복 저장된다  데이터 중복성
저장 공간의 낭비는 물론 데이터 일관성과 데이터 무결성을 유지하기 어려움
중복된 값(고객명, 연락처, 주소 등)이 저장 될 수 있다.


-응용 프로그램이 데이터 파일에 종속적이다  ex, 아래한글에서 작성한 파일을 워드에서 사용하는 데에는 제약이 있다.
응용 프로그램이 데이터 파일에 종속적이다  데이터 종속성
사용하는 파일의 구조를 변경하면 응용 프로그램도 함께 변경해야 함

-데이터 파일에 대한 동시 공유, 보안, 회복 기능이 부족하다.

-응용 프로그램 개발이 쉽지 않다


데이터베이스 관리 시스템
DBMS(DataBase Management System)
파일 시스템의 문제를 해결하기 위해 제시된 소프트웨어
조직에 필요한 데이터를 데이터베이스에 통합하여 저장하고 관리함


주요기능
정의기능 - 데이터베이스 구조를 정의하거나 수정할 수 있다.
조작 기능 - 데이터를 삽입, 삭제, 수정, 검색하는 연산을 할 수 있다. CRUD
제어 기능 - 데이터를 항상 정확하고 안전하게 유지할 수 있다.

+)
DML 데이터 조작어
DDl 데이터 정의어
DCL 데이터 제어어
TCL 트렌젝션 제어어



DB발전과정
1세대 : 네트워크 DBMS, 계층 DBMS
네트워크 DBMS : 데이터베이스를 그래프 형태로 구성
예) IDS(Integrated Data Store)
계층 DBMS : 데이터베이스를 트리 형태로 구성
예) IMS(Information Management System)

2세대 : 관계 DBMS
관계 DBMS : 데이터베이스를 테이블 형태로 구성
예) 오라클(Oracle), MS SQL 서버, 액세스(Access), 인포믹스(Informix), MySQL

3세대 : 객체지향 DBMS, 객체관계 DBMS
객체지향 DBMS : 객체를 이용해 데이터베이스를 구성
예) 오투(O2), 온투스(ONTOS), 젬스톤(GemStone)
객체관계 DBMS : 객체 DBMS + 관계 DBMS

4세대 : NoSQL • NewSQL DBMS
NoSQL DBMS : 비정형 데이터를 처리하는데 적합하고 확장성이 뛰어남
안정성과 일관성 유지를 위한 복잡한 기능을 포기
데이터 구조를 미리 정해두지 않는 유연성
확장성이 뛰어나 여러 대의 서버 컴퓨터에 데이터를 분산하여 저장하고 처리하는 환경에서 주로 사용
예) 몽고디비(MongoDB), H베이스(HBase), 카산드라(Cassandra), 레디스(Redis), 네오포제이(Neo4j), 오리엔트DB(OrientDB) 등
NewSQL DBMS: 관계 DBMS의 장점+ NoSQL의 확장성 및 유연성
예) 구글 스패너(Spanner), 볼트DB(VoltDB), 누오DB(NuoDB)


3장. 데이터베이스 시스템

데이터베이스 시스템(DBS; DataBase System)
데이터베이스에 데이터를 저장하고, 이를 관리하여 조직에 필요한 정보를 생성해주는 시스템

스키마와 인스턴스
스키마(schema)
데이터베이스에 저장되는 데이터 구조와 제약조건을 정의한 것
데이터베이스에 어떻게 데이터를 저장할지, 구조를 짜고 표를 작성해놓은 것. 정해진 값만을 저장할 수 있도록, 제약조건을 정함

인스턴스(instance)
스키마에 따라 데이터베이스에 실제로 저장된 값 - 가상 설정한 값을 저장.

+)
표를 만들 때, 빈칸이 최대한 적도록 해야한다. - 필수입력과 선택입력이 있을 경우, 선택입력 부분이 최소화 되도록 표를 구성.
구성이 완료된 후에는 실제로 저장해보면서 어떤 데이터가 들어갈지.

S M X XL 등 사이즈가 잇을 때, 4개의 칸을 만들어서 체크하는 형식으로 만드는건 비효율적.
1개의 칸에 각 값중에서 선택한 값 하나만 들어갈 수 있도록 설계하는게 더 효율적이다.


>3단계 데이터베이스 구조
미국 표준화 기관인 ANSI/SPARC에서 제안
데이터베이스를 쉽게 이해하고 이용할 수 있도록 하나의 데이터베이스를 관점에 따라 세 단계로 나눈 것
외부 단계(external level) : 개별 사용자 관점(집주인의 집 인테리어를 보는 관점)
개념 단계(conceptual level) : 조직 전체의 관점(관리인의 아파트 내부의 층이나 복도 같은거 보는 관점)
내부 단계(internal level) : 물리적인 저장 장치의 관점(건설업체의 아파트 자체를 바라보는 관점)
각 단계별로 다른 추상화(abstraction) 제공
내부 단계에서 외부 단계로 갈수록 추상화 레벨이 높아짐


3단계 데이터베이스 구조 : 외부 단계
데이터베이스를 개별 사용자 관점에서 이해하고 표현하는 단계
데이터베이스 하나에 외부 스키마가 여러 개 존재할 수 있음

외부 스키마(external schema)     <- 요구사항에 맞춰서 필요한 것들을 산출하는 단계
외부 단계에서 사용자에게 필요한 데이터베이스를 정의한 것
각 사용자가 생각하는 데이터베이스의 모습, 즉 논리적 구조로 사용자마다 다름
서브 스키마(sub schema)라고도 함

데이터베이스를 조직 전체의 관점에서 이해하고 표현하는 단계
데이터베이스 하나에 개념 스키마가 하나만 존재함
개념 스키마(conceptual schema)       <- 위에서 구상한걸 구체화
개념 단계에서 데이터베이스 전체의 논리적 구조를 정의한 것
조직 전체의 관점에서 생각하는 데이터베이스의 모습
전체 데이터베이스에 어떤 데이터가 저장되는지, 데이터들 간에는 어떤 관계가 존재하고 어떤 제약조건이 있는지에 대한 정의뿐만 아니라, 데이터에 대한 보안 정책이나 접근 권한에 대한 정의도 포함


데이터베이스를 저장 장치의 관점에서 이해하고 표현하는 단계
데이터베이스 하나에 내부 스키마가 하나만 존재함
내부 스키마(internal schema)           <- 물리설계. 각 칸들마다 어느정도의 크기? 제약조건은?
전체 데이터베이스가 저장 장치에 실제로 저장되는 방법을 정의한 것
레코드 구조, 필드 크기, 레코드 접근 경로 등 물리적 저장 구조를 정의







+)
데이터 사전(data dictionary)
시스템 카탈로그(system catalog)라고도 함
데이터베이스에 저장되는 데이터에 관한 정보, 즉 메타 데이터를 유지하는 시스템 데이터베이스
메타 데이터(meta data) : 데이터에 대한 데이터
스키마, 사상 정보, 다양한 제약조건 등을 저장
데이터베이스 관리 시스템이 스스로 생성하고 유지함
일반 사용자도 접근이 가능하지만 저장 내용을 검색만 할 수 있음

데이터 디렉터리(data directory)
데이터 사전에 있는 데이터에 실제로 접근하는 데 필요한 위치 정보를 저장하는 시스템 데이터베이스
일반 사용자의 접근은 허용되지 않음

사용자 데이터베이스(user database)
사용자가 실제로 이용하는 데이터가 저장되어 있는 일반 데이터베이스





>데이터베이스 사용자

데이터베이스를 이용하기 위해 접근하는 모든 사람
이용 목적에 따라 데이터베이스 관리자, 최종 사용자, 응용 프로그래머로 구분


데이터베이스 관리자(DBA; DataBase Administrator)
데이터베이스 시스템을 운영 및 관리하는 사람
주로 데이터 정의어와 데이터 제어어를 이용
주요 업무
데이터베이스 구성 요소 선정
데이터베이스 스키마 정의
물리적 저장 구조와 접근 방법 결정
무결성 유지를 위한 제약조건 정의
보안 및 접근 권한 정책 결정
백업 및 회복 기법 정의
시스템 데이터베이스 관리
시스템 성능 감시 및 성능 분석
데이터베이스 재구성

최종 사용자(end user)
데이터베이스에 접근하여 데이터를 조작(삽입·삭제·수정·검색)하는 사람
주로 데이터 조작어를 사용
캐주얼 사용자와 초보 사용자로 구분

응용 프로그래머(application programmer)
데이터 언어를 삽입하여 응용 프로그램을 작성하는 사람
주로 데이터 조작어를 사용




>데이터 언어
사용자와 데이터베이스 관리 시스템 간의 통신 수단
사용 목적에 따라 데이터 정의어, 데이터 조작어, 데이터 제어어로 구분


+)개발자 입장에서 수정작업은 잘 안함. 개발중인 상태인 경우가 대부분이므로, 삽입이나 삭제하면 됨.

데이터 정의어(DDL; Data Definition Language)
스키마를 정의하거나, 수정 또는 삭제하기 위해 사용


데이터 조작어(DML; Data Manipulation Language)
데이터의 삽입·삭제·수정·검색 등의 처리를 요구하기 위해 사용
절차적 데이터 조작어와 비절차적 데이터 조작어로 구분

-절차적 데이터 조작어(procedural DML)
사용자가 어떤(what) 데이터를 원하고 그 데이터를 얻기 위해 어떻게(how) 처리해야 하는지도 설명

-비절차적 데이터 조작어(nonprocedural DML)
사용자가 어떤(what) 데이터를 원하는지만 설명
선언적 언어(declarative language)라고도 함
사용자가 어떤(what) 데이터를 원하고 그 데이터를 얻기 위해 어떻게(how) 처리해야 하는지도 설명
-비절차적 데이터 조작어(nonprocedural DML)
사용자가 어떤(what) 데이터를 원하는지만 설명
선언적 언어(declarative language)라고도 함


데이터 제어어(DCL; Data Control Language)
내부적으로 필요한 규칙이나 기법을 정의하기 위해 사용
사용 목적
무결성 : 정확하고 유효한 데이터만 유지
보안 : 허가받지 않은 사용자의 데이터 접근 차단, 허가된 사용자에 권한 부여
회복 : 장애가 발생해도 데이터 일관성 유지
동시성 제어 : 동시 공유 지원





























