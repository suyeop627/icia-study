4장.데이터 모델링
>데이터 모델링(data modeling)
현실 세계에 존재하는 데이터를 컴퓨터 세계의 데이터베이스로 옮기는 변환 과정
데이터베이스 설계의 핵심 과정 - 추상화(abstraction)


2단계 데이터 모델링
개념적 데이터 모델링(conceptual modeling)
현실 세계의 중요 데이터를 추출하여 개념 세계로 옮기는 작업

논리적 데이터 모델링(logical modeling)
개념 세계의 데이터를 데이터베이스에 저장하는 구조로 표현하는 작업

데이터 모델의 구성.
연산 / 데이터구조 / 제약조건


개체-관계 모델(E-R model; Entity-Relationship model)
피터 첸(Peter Chen)이 제안한 개념적 데이터 모델
개체와 개체 간의 관계를 이용해 현실 세계를 개념적 구조로 표현
핵심 요소 : 개체(A, B), 속성(A는 남자, B는 여자), 관계(부부)

개체-관계 다이어그램(E-R diagram)
E-R 다이어그램
개체 - 관계 모델을 이용해 현실 세계를 개념적으로 모델링한 결과물을 그림으로 표현한 것



개체(entity)
현실 세계에서 조직을 운영하는 데 꼭 필요한 사람이나 사물과 같이 구별되는 모든 것
저장할 가치가 있는 중요 데이터를 가지고 있는 사람이나 사물, 개념, 사건 등
다른 개체와 구별되는 이름을 가지고 있고, 각 개체만의 고유한 특성이나 상태, 즉 속성을 하나 이상 가지고 있음
예) 서점에 필요한 개체 : 고객, 책
예) 학교에 필요한 개체 : 학과, 과목
파일 구조의 레코드(record)와 대응됨

개체
E-R 다이어그램에서 '사각형'으로 표현하고 사각형 안에 이름을 표기

속성(attribute)
개체나 관계가 가지고 있는 고유의 특성
의미 있는 데이터의 가장 작은 논리적 단위
파일 구조의 필드(field)와 대응됨
E-R 다이어그램에서 '타원'으로 표현하고 타원 안에 이름을 표기

+) 개체와 속성은 실선으로 연결할 수 할 수 있다.

실선 - 양쪽 다 상관없음
화살표 - 방향과 시간(어디서 시작해서 어디서 끝나는지)이 담겨있음
+) 화살표는 순서도에서 주로 사용되는데, ERD에서는 뱡향은 무시하므로 실선으로 연결한다.


개체 타입(entity type)
개체를 고유의 이름과 속성들로 정의한 것
파일 구조의 레코드 타입(record type)에 대응됨
개체 인스턴스(entity instance)
개체를 구성하고 있는 속성이 실제 값을 가짐으로써 실체화된 개체
개체 어커런스(entity occurrence)라고도 함
파일 구조의 레코드 인스턴스(record instance)에 대응됨
개체 집합(entity set)
특정 개체 타입에 대한 개체 인스턴스들을 모아놓은 것


테이블 = 인스턴스가 모여있는 상태.



>속성의 분류

속성 값의 개수에 따른 분류-단일 값 속성과 다중 값 속성

단일 값 속성(single-valued attribute)
값을 하나만 가질 수 있는 속성
-E-R 다이어그램에서 '사각형'으로 표현하고, 테두리를 두줄로 한다.
예) 고객 개체의 이름, 적립금 속성

다중 값 속성(multi-valued attribute)
값을 여러 개 가질 수 있는 속성
예) 고객 개체의 연락처 속성
예) 책 개체의 저자 속성
E-R 다이어그램에서 이중 테두리로 표현


의미의 분해 가능성에 따른 분류-단순 속성과 복합 속성

단순 속성(simple attribute)
의미를 더는 분해할 수 없는 속성
예) 고객 개체의 적립금 속성
예) 책 개체의 이름, ISBN, 가격 속성

복합 속성(composite attribute)
의미를 분해할 수 있는 속성
예) 고객 개체의 주소 속성
도, 시, 동, 우편번호 등으로 의미를 세분화할 수 있음
예) 고객 개체의 생년월일 속성
연, 월, 일로 의미를 세분화할 수 있음

DB로만 처리하기보다 프로그램으로 같이 처리하므로, 생년월일을 굳이 연월일로 나누지 않아도, 문자열을 쉽게 분리가 가능하다.
-반대의 경우도 쉽게 가능하므로, 복합속성과 단일속성을 깊이 고민하지 않아도 상관없음.
-생년, 생월, 생일로 구분하거나 생년월일로 하거나 큰 상관이 없다.



기존 속성 값에서 유도

유도 속성(derived attribute)
기존의 다른 속성의 값에서 유도되어 결정되는 속성
값이 별도로 저장되지 않음
예) 책 개체의 가격과 할인율 속성으로 계산되는 판매가격 속성
예) 고객 개체의 출생연도 속성으로 계산되는 나이 속성
E-R 다이어그램에서 점선 타원으로 표현


-------
널 속성(null attribute)
널 값이 허용되는 속성
-필수입력이 필요한 칸에는 사용할 수 없다.

널(null) 값
아직 결정되지 않았거나 모르는 값 또는 존재하지 않는 값
공백이나 0과는 의미가 다름
예) 등급 속성이 널 값  등급이 아직 결정되지 않았음을 의미



키 속성(key attribute) - 실제 데이터들 간에 구분을 하기 위해 필요한 속성
각 개체 인스턴스를 식별하는 데 사용되는 속성
모든 개체 인스턴스의 키 속성 값이 다름
둘 이상의 속성들로 구성되기도 함
예) 고객 개체의 고객아이디 속성
E-R 다이어그램에서 '밑줄'로 표현

+)정보의 범주에 포함되는 거라고 하긴 어렵지만, 개체 인스턴스를 구분하기 위해서 필요하다.

----------
관계(relationship)
개체와 개체가 맺고 있는 의미 있는 연관성
개체 집합들 사이의 대응 관계, 즉 매핑(mapping)을 의미
예) 고객 개체와 책 개체 간의 구매 관계
“고객은 책을 구매한다” - '구매'도 하나의 테이블로 생성된다.
E-R 다이어그램에서 '마름모'로 표현



+)관계는 개체와 개체가 맺는다.
+)속성은 관계에 아무런 영향을 주지 않는다.
+)속성끼리 관계를 맺는다면, 데이터가 중복 저장될 수 있다.



관계의 유형 : 관계에 참여하는 개체 타입의 수 기준
이항 관계 : 개체 타입 두 개가 맺는 관계
삼항 관계 : 개체 타입 세 개가 맺는 관계
순환 관계 : 개체 타입 하나가 자기 자신과 맺는 관계





관계의 유형 : 매핑 카디널리티 기준
일대일(1:1) 관계
개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 하나와 관계를 맺을 수 있고,
개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 하나와 관계를 맺을 수 있음
한번 관계를 맺고나서, 중간에 관계가 바뀌는 상황은 일대일 관계가 아니다.
(ex, 좌석 예매시, A가 예약하고 그다음날 B가 예약할경우, 일대일 관계가 아니다.

일대다(1:n)관계

일대다(1:n) 관계
개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 여러 개와 관계를 맺을 수 있지만,
개체 B의 각 개체 인스턴스는 개체 A의 개체 인스턴스 하나와 관계를 맺을 수 있음
(ex, 하나의 부서에 여러 사람이 소속됨.  = 일대다 관계를 만들때, 반대로 적용되지는 않는지 생각해볼것. ex, 여러 부서가 한사람에게 소속? X -> 1:n

다대다(n:m) 관계
개체 A의 각 개체 인스턴스가 개체 B의 개체 인스턴스 여러 개와 관계를 맺을 수 있고,
개체 B의 각 개체 인스턴스도 개체 A의 개체 인스턴스 여러 개와 관계를 맺을 수 있음



매핑 카디널리티(mapping cardinality)
관계를 맺는 두 개체 집합에서, 각 개체 인스턴스가 연관성을 맺고 있는 상대 개체 집합의 인스턴스 개수





----

E-R 다이어그램
사각형 : 개체를 표현
마름모 : 관계를 표현
타원 : 속성을 표현         +)키속성에는 밑줄
링크(연결선) : 각 요소를 연결
레이블 : 일대일, 일대다, 다대다 관계를 표기








학생 상담일지 프로그램용 DB

ICIA 고등학교에서 학생 상담일지를 프로그램으로 작성하고자 한다.
학생 정보로 학번, 이름, 학년을 작성하고, 상담한 교사는 자신의 교사번호와 이름, 상담 일자와 내용을 작성한다.
이 내용을 기반하여 ERD를 작성하시오.


+)draw.io - 다이어그램 작성할 수 있는 사이트























