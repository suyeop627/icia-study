  ArrayList
    배열과 유사한 형태의 저장 구조 객체
    java.util 패키지에 포함.
    import java.util.ArrayList; 문장을 위에 작성한다.
    저장은 객체(인스턴스)를 기반으로 한다.
    ArrayList<int> X
    ArrayList<Integer> O

    데이터를 저장할 수 있고, 객체도 저장할 수 있음.(int num = 0;)
    <>안에 클래스명을 작성하고, 값으로는 그 클래스로 만든 인스턴스를 저장한다.
    '<' 와'>'사이에 저장하고 싶은 데이터를 담을 수 있는 클래스를 넣는다. 개발자가 작성한 DTO클래스도 저장할 수 있다.

    <클래스> <- 제네릭스
    - 저장하고자 하는 클래스를 지정하면 그 클래스의 크기에 맞게 최종 설정하여 생성하는 형태. (템플릿)

    ArrayList 데이터 추가하기 : add(인스턴스)
    ArrayList 데이터 가져오기 : get(idx)
    ArrayList 데이터 삭제하기 : remove(인스턴스/idx)    idx : 순번. 0번부터 시작.      remove(0) <- 첫번째 데이터 삭제
    ArrayList 전체 데이터 삭제하기 : clear()

+)모든 클래스의 조상 클래스 - Object
  Object 타입으로 만든 변수에는 모든 것을 저장할 수 있다.
;

객체 지향의 특성
1. 캡슐화(정보 은닉)
  캡슐화 = 클래스 작성
  정보은닉 - 접근 제어자로 클래스의 내부 정보를 숨김/공개

 접근제어자
 1) public - 공공의. 공개. 제한 없음. 주로 메소드에 붙인다.
 2) default - 기본은 생략. 접근제어자를 따로 작성하지 않으면 defalut.
 3) protected (상속 관련 개념이 필요하므로, 나중에)
 4) private - 비공개. 인스턴스 내부에서만 사용.

 패키지와 접근 제어
 1) public은 패키지와 관계없이 모두 사용 가능
 2) default는 같은 패키지에서 내에서는 모두 사용 가능 - 다른 패키지에서는 사용 불가
 3) protected는 같은 패키지에서 사용 가능, 다른 패키지여도 상속을 받은 클래스에서는 사용 가능.
 4) private은 패키지와 관계없이 모두 사용 불가.

 접근 가능한 범위의 크기
 public . protected > default > private


 접근 제어자 사용 위치
 1) 클래스 앞
 2) 멤버 변수 앞 (지역변수 앞에는 사용 불가)
 3) 메소드 앞

 멤버변수는 private 로 설정.
 메소드는 public 으로 설정. 클래스 안에서만 사용해야하는 메소드일 경우, private으로.
 클래스는 public 으로 설정.

 MVC패턴으로 프로그래밍하기
 연락처 관리 프로그램


/phoneBook
MVC 패턴으로 프로그래밍 하기
연락처 관리 프로그램
  정보 - 이름, 연락처, 생일, 나이
  기능 - 입력, 출력, 검색, 수정, 삭제

  Model 패키지 - Dto
  View 패키지 -
  Controller 패키지

정보의 수정 / 삭제
->검색 + 수정/삭제





1. dto 먼저 처리 - 폴더는 전부 소문자, 클래스는 단어의 첫글자를 대문자로.
                - 변수 선언 -> setter&getter 생성
                - 데이터를 추가나 제거할 땐, 변수와 setter, getter 메소드만 추가/제거하면 된다.
2. main class 생성

3. InOutClass 생성

4. controller 생성



