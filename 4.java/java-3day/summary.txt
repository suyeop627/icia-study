    //+)클래스는 설계도일 뿐이며, new라는 키워드로 instance가 만들어져야 사용할 수 있음. //패키지는 소문자로만 작성하기.

메소드(함수) : 한가지 목적을 처리하기 위한 명령어 묶음
             결과값(반환값)이 하나이거나 없음.

함수가 객체 내부에서 작성되었을 때 메소드(Method)라고 함
  4가지 유형이 존재
  1) 파라미터, 반환값 모두 존재
  2) 파라미터만 존재
  3) 반환값만 존재
  4) 파라미터, 반환값 모두 없음.

문법)
반환형(반환값의 자료형) 메소드 이름(파라미터 목록) {명령어들}

void? 반환값이 없다는 의미.



참고) DOS 명령어
  폴더 내용(목록) 보기 : dir
  폴더 변경 : cd 폴더명


프로그램 실행하고나면 out폴더 생성
터미널에서 C:\java-work\java-3day\out\production\java-3day>
이 경로 안에 소스코드를 컴파일해놓은 .class파일이 생성됨
저 경로에서 java (클래스명) 입력해서 실행할 수 있다.

C:\java-work\java-3day\out\production\java-3day> java MethodTest a b c
여기서 a b c 는
    System.out.println(args[0]);
    System.out.println(args[1]);
    System.out.println(args[2]);
에서 args로 들어가서 출력된거(파라미터)




변수 용어의 종류
  1. 멤버 변수 : 클래스 내부, 메소드 외부에 작성
  2. 인스턴스 (멤버)변수 : 멤버 변수이며, static이 붙지 않는 변수
  3. 스태틱 (멤버)변수 : 멤버변수이며, static이 붙은 변수
  4. 클래스 변수 : 스태틱 변수와 같은말.
  5. 지역변수 : 메소드 내부에 작성하는 변수
  6. 매개변수 : 파라미터를 받기 위해 메소드명 다음 ()사이에 작성하는 변수. 지역변수와 같다.
  7. 필드 : 멤버 변수 중 인스턴스 변수를 지칭하는 다른 말.
  8. 인스턴스 참조변수 : 멤버변수 또는 지역변수이며, 인스턴스의 위치값을 저장하는 변수
                      class명 변수 = new class명();


자바 프로그램 구현 단계
클래스 작성 -> 인스턴스 생성(new 키워드) -> 인스턴스.멤버 사용

디자인 패턴(설계 유형)
MVC 패턴 - Model View Controller로 전체 코드를 분할하여 구현
model - 데이터를 묶어서 관리할 수 있도록 도와주는거..? -> 더 찾아볼 것.
view - 화면 출력 관련
controller - 전체적인 제어



예외처리(Exception Handling)
  Error(오류) - 컴파일 오류(Compile Error) : 문법 오류(80% 이상 오타로 인해 발생) - 실행 자체가 불가능함
             - 실행오류 (Runtime Error) : 사용자의 오작동->예외                - 실행은 됨
                프로그램이 비정상적으로 종료됨.
  예외 처리란 개발자가 실행 오류를 예측하여 해당 오류 발생 시 조치할 수 있는 코드를 미리 작성하는 것.(비정상적 종료를 막는 것) - 사진 캡쳐해놓은거에 비정상적 종료도 추가해서 메모

  try : 범위 안에 예외사항이 발생할 수 있는 코드를 작성.
  catch : try 코드에서 발생한 예외를 조치하기 위한 코드를 작성.
  finally : 생략 가능. 예외와 상관없이 실행해야하는 코드를 작성.

  주요 예외사항
  1) 숫자가 아닌 문자열을 숫자로 변환하려고 하는 경우
   - NumberFormatException
  2) 정수를 0으로 나누는 경우
   - ArithmeticException
  3)객체(인스턴스)가 존재하지 않는데 사용하려고 하는 경우
   - NullPointException
  4) 존재하지 않는 파일을 열려고 하는 경우
   - IOException
  5) 배열에서 배열크기보다 더 큰 순번으로 값을 쓰려는 /읽으려는 경우
  6) 네트워크 관련 처리
  7) 데이터베이스 관련 처리

기본적으로 catch()에는 해당 예외사항의 객체를 지정해야 한다.
모든 예외에 대해서 지정할 수 있는 Exception 하나로 처리할 수도 있음.

  2가지 이상의 예외사항이 발생하는 경우에 대한 처리 : catch()를 여러개 작성.

메소드에 예외 선언하기
throws : 메소드에서 발생한 예외사항을 호출한 메소드로 전달
반환형 메소드명(매개변수) throws 예외사항1, 예외사항2, ...{}
 - 매개변수 목록 옆에 작성.






객체 지향 프로그래밍 개념(Object Oriented Programming)
 다양한 작업이 가능한 프로그램 코드들(명령들)을 클래스로 묶어서 작성하고 다른 묶음과 연계하여 처리하는 프로그래밍 방식
 객체 = 변수 + 메소드
 객체 지향의 특성
 1. 캡슐화(Encapsulation) : 변수와 메소드를 하나로 묶는 것
       정보은닉(Information Hiding) : 클래스의 구성을 숨긴다.
 2. 상속(Inheritance) : 기존 코드를 재사용 + 확장.
 3. 다형성(Polymorphism) : 같은 이름의 메소드를 만들거나, 대표 클래스로 하위 클래스를 포함시킴.



캡슐화
 - 클래스를 만드는 작업.
 클래스 분류 (
  1) 정보 클래스(mvc에서 model에 해당함) - 변수와 변수의 입출력을 담당하는 메소드
  2) 부품 클래스(기능 제공 특화된 클래스)
  3) 제어 클래스(정보 클래스와 부품클래스로 프로그램을 완성하는 클래스) - 오늘 만들었던 controller class
  전체적인 프로그램을 통제하는 클래스



  정보클래스 - DTO(Data Transfer Object:데이터 전송용 객체), VO(value Object:값을 저장하는 객체)
  1. 필드(멤버 변수) 접근 제어가 필요한데, 무조건 못들어가게 막는 걸 private이라함. 아무나 들어갈 수 있는 건 public
  2. Setter 메소드 - 필드에 데이터를 대입하는 메소드
  3. Getter 메소드 - 필드에 데이터를 읽어오는 메소드

  ArrayList
    배열과 유사한 형태의 저장 구조 객체





