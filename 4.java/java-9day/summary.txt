
StringBuffer
    임시 저장고. 문자열의 수정, 변경 등의 작업의 효율성을 높이는 보조 객체.(String을 보조하기 위한 객체)
    문자들의 배열을 잠깐 만들어서 수정이나 제거같은거 하는 공간?

  String a = "abc"
  a = "xyz"

   위 라인에서,  문자열을 처리할 수 잇는 큰 공간(buffer)를 만들어서 abc를 실제로 지우고 xyz를 사용함
   abc에 +xyz를 한다면? -> buffer가 없다면?-> abcxyz라고 저장된 새로운 공간을 만들어서 해당 공간의 주소를 a에 반환
   StringBuffer를 사용하면 -> buffer에 abc에 xyz를 바로 붙일 수 있음(메모리 공간을 보다 효율적으로 처리)

StringBuffer
    1) append(str) : 버퍼에 새 문자열을 추가. (뒤에 붙인다.)
    2) capacity() : 용량. 버퍼의 크기를 구함
    3) length() : 버퍼 안의 문자열에 크기
    4) delete(st, ed) : 지정된 범위의 문자열 삭제
    5) insert(idx, str) : 지정된 위치(idx)에 str 삽입.(완성된 문자열이 아니므로 중간 삽입이 가능하다. (문자열은 그자체로 하나라서 불가능)
    6) replace(st, ed, str) : 지정된 범위의 문자열을 str로 변경.
    7) reverse() : 문자열의 순서를 역순으로 정렬.
    8) charAt(idx) : 지정된 위치의 문자를 가져온다.
    9) setCharAt(idx, char) : 지정된 위치에 문자를 변경한다.


    StringBuffer에서 작업한 내용은 마지막에 문자열로 변환이 필요하다.
    toString()메소드를 활용.
    ex)    String s = sb1.toString();      - StringBufferTest.java

날짜와 시간
  활용 클래스
    java.util 패키지 Date, Calendar class
    java.time 패키지 SimpleDateFormat class

    SimpleDateFormat의 날짜와 시간 표기 기호
    G : AD/BC 등 연호
    y : 연도, M : 월, d : 일, E : 요일
    a : 오전/오후, h : 시간, m : 분, s : 초, S : 밀리초, k / H : 24시간 주기 시

    w : week of year, W : week of month
    d : day of year, F : day of week

Calendar : 날짜와 시간의 보편적인 사용을 위한 클래스
    싱글톤(Singleton) 패턴을 사용하여 인스턴스를 생성.
    싱글톤 패턴 : 프로그램이 실행 중일 때, 인스턴스를 하나만 생성하도록 제약하는 방식.
                인스턴스를 사용하려는 다른 클래스에서 만들지(생성하지)못하게 하고,
                스스로 만들어서 인스턴스를 제공하는 방식.(8일차 guibutton 생성했던거 )
                메모리 공간의 낭비를 줄일 수 있다.

                하나의 인스턴스를 여러 클래스에서 사용해야할 때.






파일(file) 처리

프로그램에서 발생된 데이터를 유지하는 방법
1) 파일을 사용하는 방법
3) Database를 활용하는 방법

File 클래스 : 파일과 폴더(디렉토리, directory)를 다루는데 사용하는 클래스
    폴더란? 파일을 저장하는 공간(?)
        파일이나 서브폴더의 정보를 저장하고 있는 파일->폴더도 파일의 일종이므로, 파일과 폴더를 다루는 클래스의 이름이 파일.

파일이란 보조기억장치(하드디스크, HDD, C:, 또는 D:)에 저장된 상태의 데이터 묶음.
-> 파일을 활용하려면 메모리에적재되어야 한다.
메모리에 적재하여 사용하는 클래스 -> File class

파일 작업
1) 파일 정보 확인
2) 파일 경로 확인
3) 파일 이름/ 경로 변경
4) 파일 생성
5) 파일 삭제
6) 폴더 생성
7) 폴더 정보 확인
8) 폴더 변경
9) 폴더 삭제


파일 입출력
    입출력(input/output) - 기준은 프로그램.
    - 키보드 입력, 모니터 출력
    - 파일로부터 입력(불러오기), 파일로 출력(저장하기)

    입출력이란 데이터의 연속된 흐름의 처리 - Stream
    스트림은 단방향. 입력용 스트림과 출력용 스트림을 따로 사용.

    필요 클래스
    1. File 클래스
    2. 파일 입출력 Stream 클래스
        FileInputStream(파일에서 꺼내옴)/FileOutputStream(파일에 넣음) : byte 단위
        FileReader(파일에서 꺼내옴)/FileWriter(파일에 넣음) : 문자단위(비영어권에선 이게 더 나음 - 영어 1byte, 한글 3byte)
    3. 보조 입출력용 스트림 클래스
        BufferedReader / BufferedWriter : 문장/한줄 단위




customerFileName:qq;
name:ww;
password:11;
account:rr;



