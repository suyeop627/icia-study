


생성자
  인스턴스 필드(멤버변수)를 초기화 하기 위해 사용하는 특수 메소드
  클래스와 같은 이름을 사용하며, 한번만 실행하기 때문에 반환형을 붙이지 않는다.
  인스턴스를 생성하기 위해 public을 붙여준다.
  ex)
  public Car(String color, String gearType) {
    this.color = color;   //Car 인스턴스 안에 있는 color 변수를 지역변수와 구분해서 가리키기 위해 this 사용
    this.gearType = gearType;
  }


생성자 오버로딩
  다양한 마개변수를 갖는 여러개의 생성자를

+)오버로딩의 조건
  1) 메소드의 이름이 같아야 한다.
  2) 매개변수의 개수 또는 자료형이 달라야 한다.
  3) 반환형은 상관 없다.

this 란?
여기, 이곳. 인스턴스를 구별하기 위한 방법. 일종의 참조변수
멤버를 지칭하는 대명사.
this.변수명 -> 같은 이름의 멤버 변수와 지역변수를 구분하는 용도.


힙영역에 인스턴스가 만들어져서 저장 (예, 힙영역 - 책장, 인스턴스 - 책. : 책을 꺼내고 넣고 하면 위치가 바뀜)

힙영역 내 인스턴스가 저장된 위치가 중구 남방이라, 특정 영역에다가 인스턴스의 데이터가 저장된 '위치'를 저장.

같은 인스턴스들 간에도 구별이 필요하기 때문에, 스스로를 구별할 수 있는 값을 저장해놓는게 그게 this..?


생성자를 나타내는 this()메소드.
  유일하게 생성자를 호출하는 용도로 사용하는 this.
  생성자 안에서 다른 생성자를 호출하는데 사용한다.

상속(Inheritance)
  - 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것.
  - 두 클래스는 조상(부모), 자손(자식) 관계를 형성.(계층화)
  - 자손 클래스는 조상 클래스의 모든 멤버를 상속받는다.
    (생성자와 private 멤버 제외)
  - 자손의 멤버 개수는 조상보다 적을 수 없다.(생성자와 private 멤버를 제외한 자손 멤버의 개수는 조상과 같거나 많다.)
  - 단일 상속만 허용.(부모클래스 두개를 하나의 자손에 상속할 수 없다. / C++은 다중 상속 가능)


모든 클래스는 Object 클래스를 상속받아서 만들어 진다.
모든 클래스는 Object 클래스의 자손이므로 생략.

상속 문법 : extends
  자바 상속용 키워드. 새로 만들 클래스명 뒤에 extends와 부모클래스명을 작성.

  class Parent [extends Object] {}    //extends Object는 보통 생략한다.
  class Child1 extends Parent{}      //부모클래스인 Parent를 Child클래스가 상속받음.
                                  //하나의 인스턴스야 부모야 자손의 멤버가 모두 있지만, 부모쪽의 멤버와 자손의 멤버는 구분해서 관리된다.

  class Child2 extends Parent{}
  class GrandChild extends Child1{}   //Parent클래스와 Child1클래스의 멤버를 모두 상속 받는다.




  메소드 재정의(Method Overriding)
    부모 클래스의 메소드를 자식 클래스에서 재정의. 덮어쓰기.

    기본조건)
    메소드의 선언부가 동일해야 한다.
    상속받은 메소드의 내용을 새 클래스에 맞게 변경하는 것.


    void method1()       <-선언부
    -------------------------------------
    {
      .......            <-정의부(body, 몸통)
    }


    overloading은 둘다 사용
    overriding은 부모쪽 메소드는 숨기고 재정의된 자손의 메소드만 사용하므로, 다형성으로 볼 수 없다.



  Annotation
    컴파일이 되는 주석. 컴파일러에게 주는 명령어.
    @Override : 이 메소드는 재정의 된 메소드임을 알려주는 목적의 주석.

  Object 클래스의 메소드를 재정의 하자.
    toString()메소드 : 인스턴스를 출력할 경우, '패키지.클래스명 @ 16진수 해쉬넘버' 형태로 출력.


  super : 부모 클래스를 지칭하는 대명사와 같은 의미.
          부모클래스의 멤버와 자식 클래스의 멤버를 구분하는데 사용.
          부모와 자손 클래스의 이름이 같은 멤버의 구분에 사용한다.
          super.멤버  (this의 반대개념?)

  super() : 부모클래스의 생성자를 호출할 때 사용.
      자식 클래스의 생성자에서만 사용 가능.
      자식 클래스 생성자의 맨 첫줄에 위치해야 한다.


final 제어자
  클래스에 final이 붙으면 상속 불가.
  메소드에 final이 붙으면 오버라이드(재정의) 불가.


상속을 활용하는 방법
  따로 각 클래스를 작성하고 공통적인 멤버가 존재할 경우 그 부분만 뽑아서 부모클래스로 작성하는 방법이 일반적임.


실습 문제) 연락처 프로그램을 생성자를 사용하는 형태로 변경.
dto 클래스에 생성자 추가.
inputData 메소드를 생성자를 사용하는 형태로 변경.


연락처 프로그램 V2
상속을 활용한 연락처 프로그램
  일련번호, 이름, 연락처, 나이, 생일, 전공, 학교, 학년,
  회사명, 부서명, 직급.

  ->
  1. 일반(부모클래스)
       일련번호, 이름, 연락처, 나이, 생일
  2. 학교
       학교명, 전공, 학년
  3. 회사
       회사명, 부서명, 직급


디자인 패턴
  MVC 패턴
  Model - DTO(데이터를 담아서 옮기는 객체),  data 처리부분(DAO)
  View - 화면 처리. 입/출력 담당
  Controller - 전체 프로그램 제어

  DAO - Data Access Object.

MVC 패턴의 역할 분할  (유지보수가 용이하도록 기능별로 나눠서 패키지로 관리함 - 나중에 view를 웹으로 대체해서 입출력할 예정.)
  view <-> controller <-> service <-> DAO <-> DB




























