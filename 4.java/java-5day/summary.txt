상품 관리 프로그램 프로젝트
홈마이너스  동네 마트의 상품을 관리하기 위한 프로그램 작성 의뢰.
  상품의 주요 정보 : 상품이름, 가격. 미성년자 판매 가능여부, 보관 방법
  기능 : 상품입력, 상품 출력, 상품 검색, 상품 수정, 상품 삭제

 ~11:50


 static(정적인)
  인스턴스 없이 사용가능한 필드(변수)/메소드.
  멤버에 해당됨(지역변수에는 붙이지 않는다.)

  제어자
  1)접근제어자 - public, protected, default, private  (순서대로, 제어가 강해진다)
  2)기타제어자 - static, final

  static 멤버 변수는 사용 시 클래스의 이름으로 사용.(인스턴스 없이 클래스명만으로 사용 가능)
  같은 클래스로 만들어진 모든 인스턴스가 공유하는 공간.


  method         |       heap
         class =>|=> instance
   static   =>x  |
  callstack      |



  인스턴스 멤버와 스태틱 멤버의 사용에 대한 제약사항
  1. 인스턴스 멤버는 스태틱 메소드에서 사용 불가
      (인스턴스 변수는 인스턴스 메소드에서만 사용 가능)
  2. 스태틱 멤버는 모든 경우에 사용 가능.


  +)static 멤버는 보호하기 어려운 멤버임(보호를 위해서 private으로 한다면, 인스턴스 없이는 접근할 수 없음. static을 사용하는 이유가 사라짐.)


final 제어자 (이후 변경 불가)
  변수 앞에 final이 붙으면 - 상수
  클래스 앞에 final이 붙으면 - 상속이 불가능한 클래스
  메소드 앞에 final이 붙으면 - 재정의가 안되는 메소드

메소드의 다형성
  하나의 클래스에 같은 이름의 메소드를 다수 정의 하는 것
  -> Method overLoading(메소드 오버로딩)

  오버로딩의 조건
  1) 메소드의 이름이 같아야 한다.
  2) 매개변수의 개수 또는 자료형이 달라야 한다.
  3) 반환형은 상관 없다.

  대표 예)
    System.out.println();

생성자(Constructor)
  인스턴스가 생성될 때 호출(사용)되는 메소드.

  인스턴스 생성 문법>
  클래스명 인스턴스명 = new 생성자();
                    (생성자 호출)


  생성자 특수성
    1) 클래스의 이름과 같은 이름을 갖는다.(대소문자까지)
    2) 반환형을 작성하지 않는다.
    3) 모든 클래스는 최소 하나의 생성자가 있어야 한다.

  기본 생성자 - 생성자 중 매개변수가 없는 생성자.
            ->생성자가 없는 클래스에는 자동으로 기본 생성자를 컴파일러가 작성하여 처리한다.

  생성자는 인스턴스를 생성할 때만 사용할 수 있는 특수한 메소드
  -필드(멤버변수)의 값을 초기화 할 때 사용한다.

  생성자는 인스턴스의 생성과 관련된 메소드기 때문에 public으로 작성한다.(예외도 있음)

멤버 변수(필드)의 초기 값(초기화 없이 자동으로 들어가는 값)
  지역 변수는 자동으로 초기값이 들어가지 않는다.
  하지만, 멤버 변수는 자동으로 초기값을 넣어준다.
  0에 해당하는 값으로 초기화
  정수형(byte, short, int, long) : 0
  실수형(float, double) : 0.0
  문자형(char) : '\0'  <-null character(널문자) : 모든 bit가 0(꺼진상태).
  논리형(boolean) : false
  문자열(String) : null  <- 키워드. (String은 참조형 -> null은 참조하고 있는 공간이 없다는 의미의 키워드.)


this 란?
여기, 이곳. 인스턴스를 구별하기 위한 방법. 일종의 참조변수
멤버를 지칭하는 대명사.
this.변수명 -> 같은 이름의 멤버 변수와 지역변수를 구분하는 용도.


힙영역에 인스턴스가 만들어져서 저장 (예, 힙영역 - 책장, 인스턴스 - 책. : 책을 꺼내고 넣고 하면 위치가 바뀜)

힙영역 내 인스턴스가 저장된 위치가 중구 남방이라, 특정 영역에다가 인스턴스의 데이터가 저장된 '위치'를 저장.

같은 인스턴스들 간에도 구별이 필요하기 때문에, 스스로를 구별할 수 있는 값을 저장해놓는게 그게 this..?


생성자를 나타내는 this()메소드.
  유일하게 생성자를 호출하는 용도로 사용하는 this.








