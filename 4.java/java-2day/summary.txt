변수
데이터 타입
    primitive type(기본 자료형) - 8가지(숫자형 6개, 문자형 2개 / 기본 자료형은 크기가 정해져있다)
    숫자형은 기본적으로 int나 float를 쓰다가 곱셈쓸땐long이나 double을 사용하는 것이 적절할 수 있음
    (곱셈의 경우, 자료의 크기가 커질 가능성이 높다.)

데이터 크기 순서
    byte < short < int < long < float < double < String

    Type casting(형변환) - 숫자형과 문자열형에서만 처리
    변수는 변경되지 않는다. 단 변수에 저장된 값을 꺼내와서 새로운 자료형으로 변환하는 것을 형변환이라고 한다.
    규칙 1. 작은 자료형의 데이터를 큰 자료형의 데이터로 변환할 때는 자동으로 처리한다.(자동 형변환, 암시적 형변환, 묵시적 형변환)
    규칙 2. 큰 자료형의 데이터를 작은 자료형의 데이터로 변환할 때는 반드시 형변환 연산자를 사용한다.(강제 형변환, 명시적 형변환)
            형변환 연산적 ->(int)값;
    float double - 실수형
    +)long보단 float가 더 큰 개념임(정수와 실수의 개념 상) - 공간의 크기는 long이 더 크지만, float이 더 큰 개념으로 사용됨.



Wrapper Class
    자바는 모든 것을 객체(class)로 처리하는 것이 기본이다.(메인 메소드와 자료형은 객체 개념으로 처리할 수 없다.)
    문제가 되는 것이 기본 자료형임.
    자료형에 해당하는 클래스를 만든 것이 Wrapper Class
    자료형에 대한 정의와 보조적으로 사용할 수 있는 기능 메소드를 묶어 놓은 클래스이다.
    기본 자료형 8개에 대해서만 존재하는 클래스.

    Type                Wrapper
-----------------------------------------
    byte                Byte
    short               Short
    int                 Integer
    long                Long
    float               Floate
    double              Double
    char                Character
    boolean             Bloean



연산자
1. 대입 연산자 '='
    좌변의 값(변수, 수식의 결과값 등)을 우변의 변수에 입력
2. 산술 연산자 - +. -, *, /, %
    나눗셈과 나머지 연산은 자료형에 따라 다르게 연산한다.
    특히, %연산은 실수 연산에서는 사용하지 않는다.
3. 증감연산자 ++, --
    자바스크립트와 동일
4. 비교연산자 ==, !=, >, >=, <, <=
    자바스크립트와 동일. ===, !==는 없음    (자바는 타입을 먼저 정해놓고 변수를 사용하기때문에, 타입까지 비교할 필요가 없음)
5. 논리연산자 &&, ||, !(NOT)
    자바스크립트와 동일.
6. 조건연산자 (조건식)? A:B
    자바스크립트와 동일.
7. 비트 연산자(는 생략)
8. instanceof(는 나중에) - 어떤 클래스로 만들어진 instance인지를 따져야할 때 사용하는 연산자로, 관련 개념들을 배운 뒤, 다시 정리





제어문
1. 조건 제어문 : if, switch
2. 반복 제어문 : for, while
    기본 형식 - for(초기식 ; 조건식 ; 증감식)
    향상된 형식 - for(변수 : 리스트) - js의 for in
3. 기타 제어문 : break, continue


실습) 콘솔 프로그램의 골격
    프로그램 실행 후 처음으로 타이틀 출력 > 메뉴출력 > 메뉴입력 > 해당 기능 수행
    > 메뉴 출력 > .... > 종료메뉴 입력 > 종료



입력 처리 객체 Scanner - external libraries에 저장돼있음. (java base>java>util>scanner)
    다양한 자료형의 데이터를 키보드로부터 입력받기 위해 사용하는 객체
    정수 입력 : nextByte(), nextShort(), nextInt(), nextLong()
    실수 입력 : nextFloat(), nextDouble()
    불(boolean) 입력 : nextBoolean()
    문자열 입력 : nextLine(), next()

Scanner의 오류
    정수, 실수 입력 후 문자열 입력용 nextLine()을 사용하면
    문자열을 입력받지 못한다.
    입력의 끝을 인식하는 방식은 개행문자로 처리
    (개행 문자를 입력받으면 입력 작업 종료)
    개행문자 (엔터키) : 줄을 바꾸는 특수문자

오류 처리방법
1. nextLine()을 한 줄 작성한다. (변수에 대입하지 않는다)
2. next()를 사용한다. (여러 단어의 문장은 입력하지 않는다.
3. 모든 입력을 nextLine()으로 한다.
    숫자를 입력받을 경우 wrapper class의 parseXXX메소드로 변환하여 사용한다.



배열
  여러 변수의 묶음.
  같은 자료형의 데이터만 저장 가능.
  크기가 반드시 지정되어야 한다.(크기는 변경할 수 없다.)

  배열의선언)
    자료형 배열명[] = new 자료형[개수];
    자료형 배열명[] = {값1, 값2, 값3, 값4, ....}; //넣은 값의 개수만큼 배열의 크기가 정해짐

  배열 관련 메소드
    length : 배열의 크기를 저장하는 내장 변수.

  다차원 배열 - 2차원 배열
  2차원 배열 선언)
  자료형 [][] = new 자료형 [줄개수][칸개수];


실습 문제)
배열과 프로그램 골격을 사용하여 정보를 입력받고 출력하는 관리 프로그램을 작성하세요.
MainClass와 ContrllerClass로 나눠서 작성하세요.
run() 메소드 안 switch의 case로 입력과 출력을 구분하여 프로그램을 작성하세요.



리스트(List) 구조체 객체 - ArrayList를 주로 사용



메소드
객체지향































