
상속 : 기존 클래스를 재사용하여 새로운 클래스를 생성하는 것.
       extends 키워드를 사용.
       class 새클래스명 extends 기존클래스명{}

this 와 super

this : 단일 클래스.
  this.변수명 : 멤버 변수와 지역변수의 이름이 동일할 경우, 구분하기 위한 용도로 사용.
  this() : 한 생성자에서 다른 생성자를 호출할 때 사용.
super : 상속 관계 클래스들.
  super.변수명 : 부모클래스의 멤버변수
  super() : 부모클래스의 생성자.


접근제어자 protected
  같은 패키지, 상속 받은 하위(자식)클래스에서만 접근(사용)가능.
  같은 패키지인 경우 default와 같으나, 다른 패키지여도 상속하여 작성한 클래스라면 사용 가능하다.

제어자
  1) 접근제어자 : public-어디서든 접근 가능, protected, (default- 같은 패키지 안에서만 접근가능), private-같은 클래스 안에서만 접근가능
  2) 비접근제어자 : static, final, abstract(추상화)
static 정적으로. (js에서 배열은 동적)
자바는 객체지향이므로 인스턴스를 만들어서 사용하는데, static은 그런 부분을 파괴하게 한다. - 사용 자제하는게 좋음

final 마지막. 상속을 막거나 변수에 작성할 경우 변경을 못하도록 하는 등, final 은 이후 변경을 막는다.

보통 변수는 private, 메서드는 public으로 하지만 각 상황의 의미를 보고 정한다.

객체 지향 특성
  1. 캡술화(정보은닉)
  2. 상속
  3. 다형성
  4. 추상화


다형성(Polymorphism)
  하나의 참조변수(부모클래스의 참조변수)로 여러 타입의 인스턴스를 저장하는 것.
  같은 이름 다른 형태.
  메소드 오버로드(같은 메소드를 여러개 작성)

  부모 클래스를 저장하는 변수에서 자식 클래스를 저장할 수 있다.
  자식 클래스로 만든 인스턴스를 부모 클래스의 참조변수에 담을 수 있다.


  +)클래스 - 개발자가 정의한 타입이라고도 할 수 있다.
  클래스
  String
  String
  int
  이렇게 변수 선언 했을 때, 기본 자료형이 각 자료형마다 byte에 맞는 저장공간을 생성하듯이,
  클래스를 만들어도 변수들에 해당하는 저장공간을 만들어 낸다.


  형변환 : 객체의 경우 상속관계에서만 형변환이 가능
    up cast - 자식 인스턴스를 부모 참조변수에 저장
    down cast - 부모 참조변수에 저장된 인스턴스를 자식 참조변수로 되돌리는 것.

    부모 클래스로 만든 인스턴스는 자식 클래스로 만든 참조변수에 저장할 수 없다.



    부모의 참조변수에 저장한 인스턴스는 새로 추가한 멤버를 사용할 수 없다.
    사용을 위해서는 다시 원래의 인스턴스로 복원해야 한다.(down cast)

    instanceof 연산자(명령어) : 인스턴스가 어떤 클래스로 만든 건지 확인하는 명령어.(true/false)
                               어떤 거로 만들어진지 알아야 되돌리든 말든 하니까 일단 확인 먼저 하는 용도.















